on:
  workflow_call:
    inputs:
      ecr-repo-name:
        required: true
        type: string
      app-path:
        required: true
        type: string
      environment:
        description: "CDK environment that this will deploy to"
        required: true
        type: string
      region: 
        description: "AWS Region that this CDK Stack should deploy to"
        type: string
        default: us-east-1
    secrets:
      AWS_ECR_ROLE:
        description: "AWS role for GHA to push/pull from ECR"
        required: true
    outputs:
      updated-tag: 
        description: "New tag for the ECR image, if one was created"
        value: ${{ jobs.reuseable-ecr-build-and-push.outputs.updated-tag }}
jobs:
  reuseable-ecr-build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            app-path:
              - "${{inputs.app-path}}/**"  
      - name: Configure AWS Credentials
        if: steps.filter.outputs.app-path == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
          aws-region: ${{ inputs.region }}
      - name: Login to Amazon ECR
        if: steps.filter.outputs.app-path == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push docker image to Amazon ECR
        if: steps.filter.outputs.app-path == 'true'
        id: build-and-push
        working-directory: "${{inputs.app-path}}"
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.ecr-repo-name }}
          IMAGE_TAG: ${{ github.sha }}
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          docker build --cache-from $REGISTRY/$REPOSITORY:$ENVIRONMENT -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:$ENVIRONMENT -t $REGISTRY/$REPOSITORY:latest .
          docker push --all-tags $REGISTRY/$REPOSITORY
          echo "updated-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Download context artifact
        uses: actions/download-artifact@v3
        with: 
          name: context
      - run: ls
      - name: Update CDK context
        if: ${{ steps.build-and-push.outputs.updated-tag }}
        env:
          CDK_ENV: ${{ inputs.environment }}
          REPO_NAME: ${{ inputs.ecr-repo-name }}
          UPDATED_TAG: ${{ steps.build-and-push.outputs.updated-tag }}
        run: |
          echo "$( jq '.context[$CDK_ENV].lambdas[$REPO_NAME].tag = $UPDATED_TAG' --arg CDK_ENV "$CDK_ENV" --arg REPO_NAME "$REPO_NAME" --arg UPDATED_TAG "$UPDATED_TAG" cdk.json )" > cdk.json 
      - name: Upload Context
        uses: actions/upload-artifact@v3
        with:
          name: context
          path: cdk.json
            
